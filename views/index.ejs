<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>

    <!-- CSS -->
    <link rel="stylesheet" href="css/materialize.min.css">
    <link href="css/mobile.css" rel="stylesheet" />

    <!-- Javascript  -->
    <script src="js/jquery.js" type="text/javascript"></script>
    <script src="js/bootstrap.bundle.min.js" type="text/javascript"></script>
    <script src="js/materialize.min.js"></script>

    <!-- Grafico -->
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

</head>

<body id="mobile">

    <nav class="grey darken-3">
        <div class="nav">
            <div class="title">
                <a href="/">ATC LoRa RUN</a>
            </div>
            <ul class="left">
                <li> <a href="/"><i id="back" class="large material-icons">arrow_back</i></a> </li>
            </ul>
        </div>
    </nav>

    <div id="progress" class="progress grey darken-1">
        <div class="indeterminate grey lighten-4"></div>
    </div>

    <div id="oferecimento" class="row">
        <img src="img/logo-mobile/ATC.png" style="width: 10%">
        <img src="img/logo-mobile/ENET.png" style="width: 6%">
        <img src="img/logo-mobile/lora.png" style="width: 20%">
        <img src="img/logo-mobile/tctec.png" style="width: 20%">
        <img src="img/logo-mobile/BUP.png" style="width: 8%">
        <img src="img/logo-mobile/openlab.png" style="width: 20%; margin-bottom: -10px; margin-left: -2%">
    </div>

    <div id="competidores" class="row">
        <div class="col s12 m2">
            <%competidores.forEach((c, i) => {%>
            <div id="estrutura<%- Number(i) + 1%>" class="col s12 m8 offset-m2 l6 offset-l3">
                <div class="card-panel grey lighten-5 z-depth-2 alinhado">
                    <div class="row valign-wrapper">
                        <div class="col s3 " style="padding: 1%">
                            <div class="imagem">
                                <img id="image<%- Number(i) + 1%>" src="img/competidores/generic.png"
                                    class="circle responsive-img">
                                <span class="marcacao circle"><%- Number(i) + 1%>°</span>
                            </div>
                        </div>
                        <div class="col s9">
                            <span class="gps" id="iconStatusGPS<%- Number(i) + 1%>">
                                <i class="tiny material-icons">brightness_1</i>
                            </span>
                            <div class="dados">
                                <span id="nome<%- Number(i) + 1%>">
                                    unknown
                                </span>
                                <span id="sobrenome<%- Number(i) + 1%>">

                                </span>
                            </div>
                            <div class="row valign-wrapper date">
                                <div class="col s3 centered">
                                    <i class="align-self-center mr-2 material-icons icone">location_on</i>
                                    <div class="medicao">
                                        <strong id="distancia<%- Number(i) + 1%>">0</strong> <br>
                                        <span id="medicao-dis<%- Number(i) + 1%>">m</span>
                                    </div>
                                </div>
                                <div class="col s3 centered">
                                    <i class="align-self-center mr-2 material-icons icone">directions_run</i>
                                    <div class="medicao">
                                        <strong id="velocidade<%- Number(i) + 1%>">0</strong> <br>
                                        <span>Km/h</span>
                                    </div>
                                </div>
                                <div class="col s3 centered">
                                    <i class="align-self-center mr-2 material-icons icone">whatshot</i>
                                    <div class="medicao">
                                        <strong id="calorias<%- Number(i) + 1%>">0</strong> <br>
                                        <span id="medicao-cal<%- Number(i) + 1%>">cal</span>
                                    </div>
                                </div>
                                <div class="col s3 centered">
                                    <i class="align-self-center mr-2 material-icons icone">favorite_border</i>
                                    <div class="medicao">
                                        <strong id="ritmo<%- Number(i) + 1%>">00:00</strong><br>
                                        <span>min/Km</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <%})%>
        </div>
    </div>

    <div id="informacoes-individuais" class="row">
        <div class="col s12 m6">
            <div class="card">
                <div class="card-image">
                    <div id="map" style="height: 120px"></div>
                </div>
                <div class="card-content" style="padding: 0% 5%; margin: 0% ">
                    <div class="row valign-wrapper" style="padding: 0%;">
                        <div class="col s3" style="padding: 0%; ">
                            <div class="imagem ">
                                <img id="image" src="img/competidores/generic.png" class="circle responsive-img">
                            </div>
                        </div>
                        <div id="detalhesdado" class="col s9" style="padding: 0%;">
                            <h5 style="margin: 0%; text-align:center">
                                <span id="nome">unknown</span>
                                <span id="sobrenome"></span>
                            </h5>
                            <h6 style="margin: 2% 0%; text-align:center"> <span id="position"></span> ° colocado</h6>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col s12 m6" style="margin-top: 0%">
            <div class="card" style="margin-top: 0%">
                <div id="cardao" class="card-content">
                    <table class="bordered highlight" style="margin-bottom: 2% ">
                        <tbody id="body">
                            <tr>
                                <td>
                                    Distancia
                                    <h5><b id="distancia">0m</b></h5>
                                </td>
                                <td>
                                    Ritmo
                                    <h5><b id="ritmo">00:00</b></h5>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    Tempo Total
                                    <h5><b id="tempototal">0:00:00</b></h5>
                                </td>
                                <td>
                                    Calorias
                                    <h5><b id="calorias">0cal</b></h5>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="center-align">

            <a id="botaoIniciar" class="waves-effect waves-light btn-large">
                <i class="material-icons left">play_arrow</i>
                Começar
            </a>
            <a id="botaoFinalizar" class="waves-effect waves-light btn-large red lighten-2">
                <i class="material-icons left">pause</i>Finalizar</a>
        </div>
    </div>

    <div id="modal1" class="modal">
        <div class="modal-content">
            <h4>Cuidado!</h4>
            <p>Você tem certeza que deseja encerrar a corrida?</p>
        </div>
        <div class="modal-footer">
            <a href="#!" class="modal-close waves-effect waves-light btn red lighten-2"><i
                    class="material-icons left">close</i>Não</a>
            <a id="sim" href="#!" class="modal-close waves-effect waves-light btn"><i
                    class="material-icons left">check</i>Sim</a>
        </div>
    </div>

</body>
<script>

    var map
    var markers = []

    $(document).ready(() => {
        carregar()
        $('.modal').modal();
    })
    $('.card-panel').click(() => {
        $('#competidores')
            .fadeOut()
        $('#oferecimento')
            .css('display', 'none')
        $('#informacoes-individuais')
            .fadeIn(1500)
            .css('display', 'block')
        $('#back')
            .css('display', 'block')
    })

    var directionsDisplay1
    var directionsDisplay2
    var directionsService1
    var directionsService2
    var percursoDisplay
    var percursoService

    function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: -23.594338, lng: -46.6569469 },
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            zoom: 12,
            styles: [{
                "featureType": "poi",
                "stylers": [{
                    "visibility": "off"
                }]
            }],
            scrollwheel: false,
            disableDefaultUI: true,
        });

        directionsDisplay1 = new google.maps.DirectionsRenderer({
            suppressMarkers: true,
            polylineOptions: {
                strokeColor: "red"
            },
            preserveViewport: true
        });
        directionsDisplay2 = new google.maps.DirectionsRenderer({
            suppressMarkers: true,
            polylineOptions: {
                strokeColor: "red"
            },
            preserveViewport: true
        });
        percursoDisplay = new google.maps.DirectionsRenderer({
            suppressMarkers: true,
            polylineOptions: {
                strokeColor: "green"
            },
            preserveViewport: true
        });


        directionsDisplay1.setMap(map)
        directionsDisplay2.setMap(map)
        percursoDisplay.setMap(map)

        setTimeout(calcRoute, 2000)
    }
    function determinarRotaPercorrida(gps) {
        percursoService = new google.maps.DirectionsService()

        var primeira = gps[0]
        var invertido = gps.reverse()
        var ultima = invertido[0]
        var way = []

        if (gps.length > 2 && gps.length <= 27) {
            for (i = 1; i < gps.length - 1; i++) {
                way.push({ location: { lat: Number(gps[i].gps.lat), lng: Number(gps[i].gps.lng) }, stopover: true })
            }
        }

        if (gps.length > 2 && gps.length > 27) {
            for (i = 1; i < gps.length - 1; i += 5) {
                way.push({ location: { lat: Number(gps[i].gps.lat), lng: Number(gps[i].gps.lng) }, stopover: true })
            }
        }

        var percursoRequest = {
            origin: new google.maps.LatLng(primeira.gps.lat, primeira.gps.lng),
            destination: new google.maps.LatLng(ultima.gps.lat, ultima.gps.lng),
            travelMode: google.maps.TravelMode.WALKING,
            avoidTolls: true,
            waypoints: way,
            optimizeWaypoints: true,
        };

        percursoService.route(percursoRequest, function (result, status) {
            if (status == google.maps.DirectionsStatus.OK) {
                percursoDisplay.setDirections(result);
            } else {
                console.log('Deu ruim')
            }
        })
    }
    function calcRoute() {
        directionsService1 = new google.maps.DirectionsService()
        directionsService2 = new google.maps.DirectionsService()

        var Largada = new google.maps.LatLng(-46.664159394359, -23.587313389726);
        var Final = new google.maps.LatLng(-46.657128420850, -23.582682333561);

        var request1 = {
            origin: { lat: -23.58706598, lng: -46.66408002 },
            destination: { lat: -23.61096654, lng: -46.65575176 },
            travelMode: google.maps.TravelMode.DRIVING,
            avoidTolls: true,
            waypoints: [
                {
                    location: { lat: -23.58128435, lng: -46.66323245 },
                    stopover: true
                },
            ],
            optimizeWaypoints: true,
        };
        var request2 = {
            origin: { lat: -23.61103536, lng: -46.65561229 },
            destination: { lat: -23.58706598, lng: -46.66408002 },
            travelMode: google.maps.TravelMode.DRIVING,
            avoidTolls: true,
            waypoints: [
                {
                    location: { lat: -23.60861207, lng: -46.65335387 },
                    stopover: true
                },
            ],
            optimizeWaypoints: true,
        };

        directionsService1.route(request1, function (result, status) {
            if (status == google.maps.DirectionsStatus.OK) { // Se deu tudo certo
                directionsDisplay1.setDirections(result); // Renderizamos no mapa o resultado
            } else {
                console.log('Deu ruim')
            }
        });
        directionsService2.route(request2, function (result, status) {
            if (status == google.maps.DirectionsStatus.OK) { // Se deu tudo certo
                directionsDisplay2.setDirections(result); // Renderizamos no mapa o resultado
            } else {
                console.log('Deu ruim')
            }
        });
    }
    function iniciarMarcacao(infos) {
        var unique = infos.slice().reverse()

        var ponto = new google.maps.LatLng(unique[0].gps.lat, unique[0].gps.lng)
        var marker = new google.maps.Marker({
            position: ponto,
            map: map,
        })

        map.setZoom(14);
        map.setCenter(marker.getPosition())

    }
    function limparMarcadores() {
        for (var i = 0; i < markers.length; i++) {
            markers[i].setMap(null);
        }
        markers.splice(0, markers.length)
    }
    function calcularMomento(momento1, momento2) {
        return momento2 - momento1
    }
    function tranformarMomentoSegundos(momento) {
        var tempo = momento.split(':')
        var horas = tempo[0]
        var minutos = tempo[1]

        segundos = (Number(horas) * 3600) + (Number(minutos) * 60) + Number(tempo[2])
        return segundos
    }
    function filtrarHorario(momento) {
        var horas = momento.split('T')
        horas = horas[1].split('.')
        return horas[0]
    }
    function calcularVelocidade(distancia, tempo) {
        if (distancia <= 0 || tempo <= 0) {
            return (0).toFixed(2)
        } else {
            var velocidade = distancia / tempo
            return (velocidade * 3.6).toFixed(1)
        }
    }
    function calcularPace(distancia, tempo) {
        if (distancia <= 0 || tempo <= 0) {
            return `00:00`
        } else {
            var minutos = Number(tempo) / 60
            var quilometros = Number(distancia) / 1000
            var pace = minutos / quilometros
            if (pace < 10) {
                if (((pace * 60) % 60) < 10) {
                    return `0${parseInt(pace)}:0${parseInt(((pace * 60) % 60))}`
                } else {
                    return `0${parseInt(pace)}:${parseInt(((pace * 60) % 60))}`
                }
            } else {
                return `${parseInt(pace)}:${parseInt(((pace * 60) % 60))}`
            }
        }
    }
    function definirColocacao(info) {
        function comparer(a, b) {
            if (a.information.distanciaTotal < b.information.distanciaTotal) {
                return 1;
            }
            if (a.information.distanciaTotal > b.information.distanciaTotal) {
                return -1;
            }
        }
        function comparerStatus(a, b) {
            if (a.information.status < b.information.status) {
                return 1;
            }
            if (a.information.status > b.information.status) {
                return -1;
            }
        }
        function comparerTempo(a, b) {
            if (a.information.status === 100 && b.information.status === 100) {
                let diferencaTempoA = calcularMomento(tranformarMomentoSegundos(filtrarHorario(a.information.momentoInicio)), tranformarMomentoSegundos(filtrarHorario(a.information.momentoAtual)))
                let diferencaTempoB = calcularMomento(tranformarMomentoSegundos(filtrarHorario(b.information.momentoInicio)), tranformarMomentoSegundos(filtrarHorario(b.information.momentoAtual)))
                if (diferencaTempoB < diferencaTempoA) {
                    return 1;
                }
                if (diferencaTempoB > diferencaTempoA) {
                    return -1;
                }
            }
            return 0;
        }
        function comparerModalidade(a, b) {
            if (a.participante.modalidade < b.participante.modalidade) {
                return -1;
            }
            if (a.participante.modalidade > b.participante.modalidade) {
                return 1;
            }
        }

        info.sort(comparer).sort(comparerStatus).sort(comparerTempo).sort(comparerModalidade);
    }
    function formatarDistancia(distancia, index) {

        if (distancia < 0) {
            conectar(`medicao-dis${Number(index) + 1}`, 'm')
            return `${distancia}`
        } else if (distancia < 1000) {
            conectar(`medicao-dis${Number(index) + 1}`, 'm')
            return `${distancia}`
        } else if (distancia % 1000 == 0) {
            conectar(`medicao-dis${Number(index) + 1}`, 'km')
            return `${distancia / 1000}`
        } else {
            conectar(`medicao-dis${Number(index) + 1}`, 'km')
            return `${parseInt(distancia / 1000)}.${parseInt((distancia % 1000) / 10)}`
        }

    }
    function reverterTempo(tempo) {
        if (tempo < 0) return `0:00:00`
        function duas_casas(numero) {
            if (numero <= 9) {
                numero = "0" + numero;
            }
            return numero;
        }
        hora = (parseInt(tempo / 3600));
        minuto = duas_casas(Math.floor((tempo % 3600) / 60));
        segundo = duas_casas((tempo % 3600) % 60);
        formatado = hora + ":" + minuto + ":" + segundo;
        return formatado;
    }
    function calcularCalorias(velocidade, peso, tempo, index = null) {
        var caloria = (parseInt(Number(velocidade) * Number(peso)) * 0.0175) * parseInt(tempo / 60)
        if (caloria >= 1000) {
            if (index) conectar(`medicao-cal${Number(index) + 1}`, 'Kcal')
            return `${parseInt(caloria / 1000)}.${parseInt((caloria % 1000) / 100)}`
        }
        else if (caloria < 0) {
            conectar(`medicao-cal${Number(index) + 1}`, 'cal')
            return `0`
        }
        else {
            conectar(`medicao-cal${Number(index) + 1}`, 'cal')
            return `${parseInt(caloria)}`
        }
    }
    function conectar(id, value, type = 'inner') {
        if (type == 'inner') document.getElementById(id).innerHTML = value
        if (type == 'src') document.getElementById(id).src = value
    }
    function finalizarCompetição(id) {
        $.ajax({
            cache: false,
            type: 'PUT',
            url: `/dados/finalizar/${id}`,
            success: (data) => {
                limparMarcadores()

                $('#botaoIniciar')
                    .css('display', 'inline-block')

                $('#botaoFinalizar')
                    .css('display', 'none')

            }, error: (e) => {
                console.error(e)
            }
        })
    }
    function plottarDados(infos) {
        for (info in infos) {
            plottarDadosMobile(infos)
            abrirEstrutura(info, infos)
        }
    }
    function gerarStatusGPS(gps, posicao) {
        if (gps.length < 2) {
            $('#iconStatusGPS').css('color', '#000000')
        } else {
            let inverse = gps.reverse()
            let { momento: ultima } = inverse[0]
            let { momento: penultima } = inverse[1]

            let diferenca = calcularMomento(tranformarMomentoSegundos(filtrarHorario(penultima)),
                tranformarMomentoSegundos(filtrarHorario(ultima)))

            if (diferenca >= 65) {
                $(`#iconStatusGPS${posicao}`).css('color', '#ef5350')
            } else {
                $(`#iconStatusGPS${posicao}`).css('color', '#00c853')
            }
        }
    }
    function carregar() {
        $.ajax({
            cache: false,
            url: '/dados/info',
            success: (data) => {

                limparMarcadores()

                var { infos, gps, participantes } = data
                let todasInfosCompetidor = []

                for (i in infos) {
                    for (p in participantes) {
                        if (infos[i].devAdress === participantes[p].devAdress) {
                            todasInfosCompetidor.push({ participante: participantes[p], information: infos[i], gps: gps.filter((v) => v.devAdress == participantes[p].devAdress) })
                        }
                    }
                }

                definirColocacao(todasInfosCompetidor)
                plottarDados(todasInfosCompetidor)
            },
            error: (e) => {
                console.error('Error', e)
            }
        })
    }
    function plottarDadosMobile(infos) {

        let distancia = infos[info].information.distanciaTotal

        var momentoInicialInicio = filtrarHorario(infos[info].information.momentoInicio),
            momentoAtualInicio = filtrarHorario(infos[info].information.momentoAtual),
            momentoDiferenca = calcularMomento(tranformarMomentoSegundos(momentoInicialInicio),
                tranformarMomentoSegundos(momentoAtualInicio))

        conectar(`nome${Number(info) + 1}`, infos[info].participante.nome)
        conectar(`sobrenome${Number(info) + 1}`, infos[info].participante.sobrenome)
        conectar(`image${Number(info) + 1}`, `/img/competidores/${infos[info].participante.foto}`, 'src')
        conectar(`distancia${Number(info) + 1}`, formatarDistancia(distancia, info))
        conectar(`velocidade${Number(info) + 1}`, `${calcularVelocidade(distancia, momentoDiferenca)}`)
        conectar(`calorias${Number(info) + 1}`, calcularCalorias(calcularVelocidade(distancia, momentoDiferenca), infos[info].participante.peso, momentoDiferenca, info))
        conectar(`ritmo${Number(info) + 1}`, calcularPace(distancia, momentoDiferenca))

        gerarStatusGPS(infos[info].gps, Number(info) + 1)

        let { status } = infos[info].information

        if (status === 99) {
            $(`#nome${Number(info) + 1}`).css('color', '#f9a825')
            $(`#sobrenome${Number(info) + 1}`).css('color', '#f9a825')
        }
        if (status === 100) {
            $(`#nome${Number(info) + 1}`).css('color', '#00c853')
            $(`#sobrenome${Number(info) + 1}`).css('color', '#00c853')
        }

    }
    function abrirEstrutura(posicao, infos) {

        var cadaInfo = infos[posicao]
        var colocacao = Number(posicao) + 1
        var idEstructure = document.getElementById(`estrutura${colocacao}`)
        var botaoIniciar = document.getElementById(`botaoIniciar`)
        var botaoFinalizar = document.getElementById('botaoFinalizar')
        let distancia = cadaInfo.information.distanciaTotal

        idEstructure.addEventListener('click', () => {

            if (cadaInfo.information.status === 99) {
                $('#botaoIniciar')
                    .css('display', 'none')

                $('#botaoFinalizar')
                    .css('display', 'inline-block')
            }

            if (cadaInfo.information.status === 100) {
                $('#botaoIniciar')
                    .addClass('disabled')
            }

            detalharInformacao(cadaInfo.participante.devAdress)

            botaoIniciar.addEventListener('click', () => {

                $('#progress')
                    .css('display', 'block')

                $('#botaoIniciar')
                    .toggleClass('disabled')

                $.ajax({
                    cache: false,
                    type: 'PUT',
                    url: `/dados/iniciar/${cadaInfo.participante.devAdress}`,
                    success: (data) => {
                        conectar(`distancia`, 0)
                        conectar(`tempototal`, `0:00:00`)
                        conectar(`calorias`, 0)
                        conectar(`ritmo`, 0)

                        $('#botaoIniciar')
                            .css('display', 'none')
                            .removeClass('disabled')
                        $('#botaoFinalizar')
                            .css('display', 'inline-block')
                        $('#progress')
                            .css('display', 'none')

                    }, error: (e) => {
                        $('#botaoIniciar')
                            .removeClass('disabled')
                    }
                })
            })

            botaoFinalizar.addEventListener('click', () => {
                var sim = document.getElementById('sim')
                sim.addEventListener('click', () => {
                    finalizarCompetição(cadaInfo.participante.devAdress)
                    detalharInformacao(cadaInfo.participante.devAdress)
                    $('#botaoIniciar')
                        .addClass('disabled')
                })
                $('#modal1').modal('open');
            })

            setInterval(() => {
                detalharInformacao(cadaInfo.participante.devAdress)
            }, 10000)
        })
    }
    function detalharInformacao(id) {
        $.ajax({
            url: `/dados/info`,
            cache: false,
            success: (data) => {

                limparMarcadores()

                var { infos, gps, participantes } = data
                let todasInfosCompetidores = []

                for (i in infos) {
                    for (p in participantes) {
                        if (infos[i].devAdress === participantes[p].devAdress) {
                            todasInfosCompetidores.push({ participante: participantes[p], information: infos[i], gps: gps.filter((v) => v.devAdress == participantes[p].devAdress) })
                        }
                    }
                }
                definirColocacao(todasInfosCompetidores)

                let competidorIndividual = todasInfosCompetidores.filter((l) => l.participante.devAdress === id)
                let { information: infosInd, gps: gpsInd, participante: participanteInd } = competidorIndividual[0]

                if (gpsInd.length != 0) {
                    iniciarMarcacao(gpsInd)
                }

                if (gpsInd.length >= 2) {
                    determinarRotaPercorrida(gpsInd)
                }

                let colocacao = Number(todasInfosCompetidores.indexOf(competidorIndividual[0])) + 1

                let distancia = infosInd.distanciaTotal,
                    peso = participanteInd.peso

                var momentoInicialInicio = filtrarHorario(infosInd.momentoInicio),
                    momentoAtualInicio = filtrarHorario(infosInd.momentoAtual),
                    momentoDiferenca = calcularMomento(tranformarMomentoSegundos(momentoInicialInicio),
                        tranformarMomentoSegundos(momentoAtualInicio))

                conectar(`nome`, participanteInd.nome)
                conectar(`sobrenome`, participanteInd.sobrenome)
                conectar(`position`, colocacao)
                conectar(`image`, `/img/competidores/${participanteInd.foto}`, 'src')
                conectar(`distancia`, formatarDistancia(distancia, info))
                conectar(`tempototal`, reverterTempo(momentoDiferenca))
                conectar(`calorias`, calcularCalorias(calcularVelocidade(distancia, momentoDiferenca), peso, momentoDiferenca))
                conectar(`ritmo`, calcularPace(distancia, momentoDiferenca))

            }
        })
    }




</script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAhS0HbkkKiUf2BV1T_skrfb2Pw63XzPeI&callback=initMap" async
    defer></script>

</html>